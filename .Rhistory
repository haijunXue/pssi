students$name = c("Maria", "Franz", "Peter", "Lisa", "Hans", "Eva", "Mia", "Karl")
checkHeight3 = function(students.input = students){
# prepare result data.frame
result.frame = data.frame(matrix(NA, nrow = nrow(students.input), ncol = 2))
colnames(result.frame) = c("name", "difference")
result.frame$name <- students.input$name
# calculate sex means for height
male.mean = students.input %>%
filter(sex == "M") %>%
summarise(mean = mean(height))
female.mean = students.input %>%
filter(sex == "F") %>%
summarise(mean = mean(height))
# calculate the difference and store it the result data.frame
result.frame$difference <- apply(students.input, 1, function(stud) {
ifelse(stud["sex"] == "M",
male.mean - as.numeric(stud["height"]),
female.mean - as.numeric(stud["height"])
)})
return(result.frame)
}
checkHeight3(students.input = students)
checkHeight = function(students.input,sex.specific){
# prepare result data.frame
result.frame = data.frame(matrix(NA, nrow = nrow(students.input), ncol = 2))
colnames(result.frame) = c("name", "difference")
result.frame$name <- students.input$name
# calculate sex means for height
male.mean = students.input %>%
filter(sex == "M") %>%
summarise(mean = mean(height))
female.mean = students.input %>%
filter(sex == "F") %>%
summarise(mean = mean(height))
overall.mean = mean(students.input$height)
# calculate the difference and store it the result data.frame
result.frame$difference <- apply(students.input, 1, function(stud){
if (sex.specific){
ifelse(stud["sex"] == "M",
male.mean - as.numeric(stud["height"]),
female.mean - as.numeric(stud["height"])
)
} else {
overall.mean - as.numeric(stud["height"])
}
})
return(result.frame)
}
checkHeight3(students.input = students,sex.specific=TRUE)
checkHeight = function(students.input,sex.specific){
# prepare result data.frame
result.frame = data.frame(matrix(NA, nrow = nrow(students.input), ncol = 2))
colnames(result.frame) = c("name", "difference")
result.frame$name <- students.input$name
# calculate sex means for height
male.mean = students.input %>%
filter(sex == "M") %>%
summarise(mean = mean(height))
female.mean = students.input %>%
filter(sex == "F") %>%
summarise(mean = mean(height))
overall.mean = mean(students.input$height)
# calculate the difference and store it the result data.frame
result.frame$difference <- apply(students.input, 1, function(stud){
if (sex.specific){
ifelse(stud["sex"] == "M",
male.mean - as.numeric(stud["height"]),
female.mean - as.numeric(stud["height"])
)
} else {
overall.mean - as.numeric(stud["height"])
}
})
return(result.frame)
}
checkHeight(students.input = students,sex.specific=TRUE)
checkHeight = function(students.input,sex.specific){
# prepare result data.frame
result.frame = data.frame(matrix(NA, nrow = nrow(students.input), ncol = 2))
colnames(result.frame) = c("name", "difference")
result.frame$name <- students.input$name
# calculate sex means for height
male.mean = students.input %>%
filter(sex == "M") %>%
summarise(mean = mean(height))
female.mean = students.input %>%
filter(sex == "F") %>%
summarise(mean = mean(height))
overall.mean = mean(students.input$height)
# calculate the difference and store it the result data.frame
result.frame$difference <- apply(students.input, 1, function(stud){
if (sex.specific){
ifelse(stud["sex"] == "M",
male.mean - as.numeric(stud["height"]),
female.mean - as.numeric(stud["height"])
)
} else {
overall.mean - as.numeric(stud["height"])
}
})
return(result.frame)
}
checkHeight(students.input = students,sex.specific=FALSE)
library(pssi)
example()
example(top)
checkHeight(students.input = students,sex.specific=FALSE)
example(checkHeight)
library(pssi)
example(checkHeight)
library(pssi)
example(checkHeight)
help
?checkHeight
checkHeight(students.input = students,sex.specific=FALSE)
library(pssi)
library(pssi)
example(checkHeight)
?checkHeight
library(pssi)
?checkHeight
library(pssi)
library(pssi)
?checkHeight
library(pssi)
library(pssi)
library(dplyr)
age = c(19, 22, 21, 23, 22, 20, 28, 25)
weight = c(50, 75, 80, 56, 75, 58, 65, 82)
height = c(1.66, 1.78, 1.90, 1.72, 1.83, 1.68, 1.70, 1.85)
sex = c("F", "M", "M", "F", "M", "F", "F", "M")
students = data.frame(cbind(age, weight, height, sex))
students = transform(students, age = as.numeric(as.character(age)))
students = transform(students, height = as.numeric(as.character(height)))
students = transform(students, weight = as.numeric(as.character(weight)))
students$name = c("Maria", "Franz", "Peter", "Lisa", "Hans", "Eva", "Mia", "Karl")
students
save(students,file = "Data/pssi_data.rda")
data(pssi_data)
library(pssi)
data(pssi_data)
library(pssi)
load("~/hello-world/U2/pssi/Data/pssi_data.rda")
data(pssi_data)
Data(pssi_data)
library(pssi)
Data(pssi_data)
data(pssi_data)
data(Exercise1)
library(pssi)
data(pssi_data)
library(pssi)
data(pssi_data)
students
?pssi_data
library(pssi)
?pssi_data
library(pssi)
?pssi_data
help(packages = pssi_data)
help(package = pssi_data)
help(package = pssi_data)
help(package = pssi)
library(pssi)
library(pssi)
help(package = pssi)
library(oro.nifti)
install.packages("oro.nifti")
library(oro.nifti)
?readNIfTI
system.file(package = "pssi")
library(pssi)
library(pssi)
?pssi
?pssi_data
help(package = pssi)
write.csv(students,file = "data-raw/students.csv",row.names = FALSE)
stu <- read.csv(file = "data-raw/students.csv")
stu
devtools::use_data(stu)
devtools::use_data(stu,overwrite = TRUE)
library(pssi)
library(pssi)
library(pssi)
library(pssi)
library(pssi)
library(oro.nifti)
devtools:: document()
devtools:: check()
library(pssi)
devtools::document()
system.file("students", "students.csv", package = "pssi")
tools::resaveRdaFiles("students",students.csv)
devtools:: use_rcpp()
citation("pssi")
citation("pssi")
system.file("extdata", "stu.csv", package = "pssi")
library(pssi)
system.file("extdata", "stu.csv", package = "pssi")
system.file("extdata", "students.csv", package = "pssi")
library(pssi)
system.file("extdata", "students.csv", package = "pssi")
system.file("extdata", "students.csv", package = "pssi")
system.file("extdata", "students.csv", package = "pssi")
system.file()
citation()
citation("pssi")
citEntry()
evtools::release()
devtools::release()
0
?pssi
??pssi
?checkHeight
devtools::install_github("haijunXue/Exercise3")
write.csv(students,file = "extdata/students.csv",row.names = FALSE)
stu <- read.csv(file = "extdata/students.csv")
stu
devtools::use_data(stu,overwrite = TRUE)
#install.packages("formatR")
#formatR::tidy_dir("R")
#install.packages("lintr")
#lintr::lint_package()
#------------------1
# find a suitable and permitted <pkg_name> for your package.
#check on CRAN if the name is already taken.
#name : pssi     pefeckt solved statistic issue
#----------2
#create the structure for the package via devtools:: create('../folder/pkg_name')
#devtools::create("~/hello-world/U2/psy")
#-----------3
#put your function checkHeight() from the previous sessions in the created /R folder.
library(dplyr)
age = c(19, 22, 21, 23, 22, 20, 28, 25)
weight = c(50, 75, 80, 56, 75, 58, 65, 82)
height = c(1.66, 1.78, 1.90, 1.72, 1.83, 1.68, 1.70, 1.85)
sex = c("F", "M", "M", "F", "M", "F", "F", "M")
students = data.frame(cbind(age, weight, height, sex))
students = transform(students, age = as.numeric(as.character(age)))
students = transform(students, height = as.numeric(as.character(height)))
students = transform(students, weight = as.numeric(as.character(weight)))
students$name = c("Maria", "Franz", "Peter", "Lisa", "Hans", "Eva", "Mia", "Karl")
students
#help(package = pssi)
# ?pssi_data
# ?checkHeight
# save(students,file = "data/passi_data.rda")
checkHeight3 = function(students.input = students){
# prepare result data.frame
result.frame = data.frame(matrix(NA, nrow = nrow(students.input), ncol = 2))
colnames(result.frame) = c("name", "difference")
result.frame$name <- students.input$name
# calculate sex means for height
male.mean = students.input %>%
filter(sex == "M") %>%
summarise(mean = mean(height))
female.mean = students.input %>%
filter(sex == "F") %>%
summarise(mean = mean(height))
# calculate the difference and store it the result data.frame
result.frame$difference <- apply(students.input, 1, function(stud) {
ifelse(stud["sex"] == "M",
male.mean - as.numeric(stud["height"]),
female.mean - as.numeric(stud["height"])
)})
return(result.frame)
}
checkHeight3(students.input = students)
#mean <- pssi::mean()
#-----------------4
# implement the option to calcaulte the difference from the sex-specific or
# the overall mean height
# the funciton should have a signature like this:
# checkHeight = function(students.input,sex.specific=TRUE)
#' @title  calcaulte the difference from the sex-specific or the overall mean height
#'
#' @description calculate
#' @param students.input the student dataframe
#' @param sex.secific the student sex
#' @export
#' @include utils.R
#' @seealso \code{\link[utils]{head}}
#' @return result.frame
#' @examples
#'checkHeight(students.input = students,sex.specific=FALSE)
#'checkHeight(students.input = students,sex.specific=TRUE)
checkHeight = function(students.input,sex.specific){
# prepare result data.frame
result.frame = data.frame(matrix(NA, nrow = nrow(students.input), ncol = 2))
colnames(result.frame) = c("name", "difference")
result.frame$name <- students.input$name
# calculate sex means for height
male.mean = students.input %>%
filter(sex == "M") %>%
summarise(mean = mean(height))
female.mean = students.input %>%
filter(sex == "F") %>%
summarise(mean = mean(height))
overall.mean = mean(students.input$height)
# calculate the difference and store it the result data.frame
result.frame$difference <- apply(students.input, 1, function(stud){
if (sex.specific){
ifelse(stud["sex"] == "M",
male.mean - as.numeric(stud["height"]),
female.mean - as.numeric(stud["height"])
)
} else {
overall.mean - as.numeric(stud["height"])
}
})
return(result.frame)
}
checkHeight(students.input = students,sex.specific=FALSE)
#------------5
#add a welcome text like Welcome to my first R-package and thanks for using it.muchacho!
#after your package is loaded
# Hint : use .onAttach()
# and packageStartupMessage()
.onAttach <- function(libname,pkgname){
packageStartupMessage("Welcome to my first R-package and thanks for using it, muchacho!")
}
#-----------6
#Add meaningful Descriptions to the corresponding file that devtools already created for you.
#Rememner,that we use the package dplyr to calculate the sex-specific means  within the function.
#Thus,include dplyr as required Imports:.
#-----------7
#Document your function using the roxygen2 package.
#1) Manually add roxygen2 style comments on your function in the folder R
#2) use the command load_all() from devtools to source the functions from your package
#devtools::load_all()
#3) use devtools:document() to automatically update the man/ and the NAMESPACE file.
#here it is important that your working direcotry is set to your package'path
#devtools::document()
#4) preview the documentation with ? checkHeight().
#your should receive the well-known R-style documentation for your funtion
#?checkHeight()
#5)repeat that process until you like what you see
#6) imagine your would have to write this -Rd files by yourself. Roxygen2 is lit af!
#--------------8
#for any reason ,we want our own mean() function to be used with checkHeight().
#This functin should round the returned value on three decimals and should just be used
#internally and thus not exported.
#create a new script utils.R in which you store this little,self-written helper function.
#Document it for yourself in roxygen2-style.
#-------------9
#check,if your self-written mean() function is used by checkHeight().
#Hint: you check the enviroment of a function via environment(function)
#envoriment(mean)
#-------10
#make sure,that only checkHeight() is getting exported
#-------------11
#updata the NAMESPACE file again via devtools::document()
#--------------12
#add the students.csv to your package as example data.
#therefore export the dataframe from the lst exercise as a.rda objec
# and store it in a sub-folder data.
#also ,include a description as a script in R/ with roxygen2 comments
#updata evetything via devtools:document()
write.csv(students,file = "extdata/students.csv",row.names = FALSE)
stu <- read.csv(file = "extdata/students.csv")
stu
#system.file("students", "students.csv", package = "pssi")
devtools::use_data(stu,overwrite = TRUE)
#-------------13
# run a check on your whole package via devtool's check() function
#hint: make sure,you are in the package's working directory
#try to understand the output and correct your code accordingly
#hint : do not get confused by notes concerning the variable names
#like no visible binding for global variable 'sex'
#this is due to the use of dplyr and cannot be mitigated
#devtools::check()
#14. put your package on Github and add an informative README.md
#15.Install your package via devtools:: install_github("<Username>/<Package name>")
# and test its functionality on the provided students data set
# also check the help description
#devtools::release()
devtools::install_github("haijunXue/Exercise3")
devtools::install_github("haijunXue/Exercise3")
installing help indices
devtools::install_github("haijunXue/Exercise3")
devtools::install_github("haijunXue/Exercise3")
checkHeight(students.input = students,sex.specific = TRUE)
devtools::check()
devtools::load_all()
devtools::install_github("haijunXue/Exercise3")
devtools::install_github("haijunXue/pssi")
devtools::install_github("haijunXue/pssi")
devtools::install_github("haijunXue/pssi")
devtools::install_github("haijunXue/pssi",force = TRUE)
envoriment(mean)
environment(mean)
environment(mean())
environment(mean)
document()
devtools::document()
environment(mean)
library(pssi)
environment(mean)
mean <- function(x){
sum = 0
for (i in 1:length(x)){
sum = x[i]+sum
}
return (round(sum/length(x),digits = 3))
}
#x = c(1,2,3)
#x = students$height
#c <- mean1(x)
#c
mean1 <- function(x){
return (round(sum(x)/length(x),digits = 3))
}
c = c(1,2,3)
mean1(c)
mean1 <- function(x){
return (round(sum(x)/length(x),digits = 3))
}
c = c(1.22,2,3)
mean1(c)
library(pssi)
library(pssi)
?pssi
library(pssi)
library(pssi)
library(pssi)
?checkH
?checkHeight
library(pssi)
library(pssi)
library(checkmate)
assert(checkNull(x), checkInteger(x, any.missing = FALSE))
x = 1:10
assert(checkNull(x), checkInteger(x, any.missing = FALSE))
x = 1
assert(checkChoice(x, c("a", "b")), checkDataFrame(x))
x = "a"
coll = makeAssertCollection()
print(coll$isEmpty())
assertNumeric(x, add = coll)
coll$isEmpty()
x = "a"
coll = makeAssertCollection()
print(coll$isEmpty())
assertNumeric(x, add = coll)
coll$isEmpty()
coll$push("Custom error message")
coll$getMessages()
?assertLogical
assertLogical(x = sex.specific)
sex.specific = TRUE
assertLogical(x = sex.specific,len=1L)
print.statement = FALSE
assertLogical(x=print.statement,len=1L)
print.statement = F1
assertLogical(x=print.statement,len=1L)
print.statement = 1
assertLogical(x=print.statement,len=1L)
?assertDataFrame
students.input = students
assertDataFrame(x=students.input, min.rows = 4,ncols = 5, types = c("numeric", "numeric", "numeric", "factor", "character"),any.missing = FALSE)
students.input = students
assertDataFrame(x=students.input, min.rows = 12,ncols = 5, types = c("numeric", "numeric", "numeric", "factor", "character"),any.missing = FALSE)
?assertNumeric
students
students[3]
students.input[3]
assertNumeric(x=students.input[3],lower = 1.30,upper = 2.40,finite = FALSE,len = 3,any.missing = FALSE)
students.input[3].value()
apply(students.input[3],assertNumeric(lower = 1.30,upper = 2.40,finite = FALSE,len = 3,any.missing = FALSE))
?apply()
apply(students.input[3],FUN = assertNumeric(lower = 1.30,upper = 2.40,finite = FALSE,len = 3,any.missing = FALSE))
apply(students.input[3],FUN = functin(height){
assertNumeric(x = height,lower = 1.30,upper = 2.40,finite = FALSE,len = 3,any.missing = FALSE)})
apply(students.input[3],FUN = functin(height){
assertNumeric(x = height,lower = 1.30,upper = 2.40,finite = FALSE,len = 3,any.missing = FALSE)
})
apply(students.input[3],FUN = function(height){
assertNumeric(x = height,lower = 1.30,upper = 2.40,finite = FALSE,len = 3,any.missing = FALSE)
})
apply(students.input[3],MARGIN = 2,FUN = function(height){
assertNumeric(x = height,lower = 1.30,upper = 2.40,finite = FALSE,len = 3,any.missing = FALSE)
})
apply(students.input[3],MARGIN = 2,FUN = function(height){
assertNumeric(x = height,lower = 1.30,upper = 2.40,finite = FALSE,any.missing = FALSE)
})
apply(students.input[3],MARGIN = 2,FUN = function(h){
assertNumeric(x = h,lower = 1.30,upper = 2.40,finite = FALSE,any.missing = FALSE)
})
?assertFactor
students
x = factor("a", levels = c("a", "b"))
testFactor(x)
testFactor(x, empty.levels.ok = FALSE)
assertFactor(students.input[4],levels = c("F","M"))
apply(students.input[4],MARGIN = 2,FUN = function(sex){
assertFactor(x = sex,max.levels = 2,levels = c("F","M"))
})
type(students)
str(students)
apply(students.input[4],MARGIN = 2,FUN = function(sex){
assertFactor(x = sex,max.levels = 2,levels = c("F","M"))
})
apply(students.input[4],MARGIN = 2,FUN = function(sex){
assertFactor(x = sex,max.levels = 2,levels = c("F","M"))
})
apply(students.input[4],MARGIN = 2,FUN = function(sex){
assertFactor(x = factor(sex),max.levels = 2,levels = c("F","M"))
})
devtools:: document()
devtools:: document()
devtools:: document()
pssi
